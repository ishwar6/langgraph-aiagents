"""Agent that distils retrieved context into a short synopsis.

It relies on a chat model to compress multiple documents into a concise
summary for downstream consumption.
"""
from typing import List
from langchain_openai import ChatOpenAI

class SummarizerAgent:
    """Produce concise summaries from document lists."""

    def __init__(self, model: str = "gpt-3.5-turbo") -> None:
        """Initialise the chat model used for summarisation.

        Parameters
        ----------
        model: str
            Identifier for the chat model.
        """
        self.llm = ChatOpenAI(model=model)

    def run(self, docs: List[str]) -> str:
        """Create a natural language synopsis.

        Parameters
        ----------
        docs: List[str]
            Text fragments that compose the context.

        Returns
        -------
        str
            Summary generated by the model.
        """
        content = "\n".join(docs)
        result = self.llm.invoke(f"Summarize:\n{content}")
        return str(result.content)
